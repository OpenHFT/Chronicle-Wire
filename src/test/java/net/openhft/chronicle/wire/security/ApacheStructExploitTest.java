/*
 * Copyright 2016-2022 chronicle.software
 *
 *       https://chronicle.software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.openhft.chronicle.wire.security;

import net.openhft.chronicle.core.util.ClassNotFoundRuntimeException;
import net.openhft.chronicle.wire.Marshallable;
import net.openhft.chronicle.wire.WireTestCommon;
import org.junit.Test;

import static org.junit.Assert.fail;

/**
 * Test to ensure Chronicle Wire isn't vulnerable to an exploit https://www.exploit-db.com/exploits/42627
 */
public class ApacheStructExploitTest extends WireTestCommon {
    @Test(expected = ClassNotFoundRuntimeException.class)
    public void test() {
        ignoreException("com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data");
        String yaml2 = "" +
                "!com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data {\n" +
                "  dataHandler: !javax.activation.DataHandler {\n" +
                "    dataSource: !com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource { contentType: !!null \"\", is: !javax.crypto.CipherInputStream { in: !!null \"\", cipher: !javax.crypto.NullCipher { provider: !!null \"\", spi: !!null \"\", transformation: !!null \"\", cryptoPerm: !!null \"\", exmech: !!null \"\", initialized: false, opmode: 0, firstSpi: !!null \"\", firstService: !!null \"\", serviceIterator: !javax.imageio.spi.FilterIterator { iter: !javax.imageio.spi.FilterIterator { iter: !java.util.Collections$EmptyIterator { }, filter: !!null \"\", next: !java.lang.ProcessBuilder { command: [ /bin/sh, \"-c\", \"'''+ command +'''\" ], directory: !!null \"\", environment: !!null \"\", redirectErrorStream: false, redirects: !!null \"\" } }, filter: !javax.imageio.ImageIO$ContainsFilter { method: !java.lang.reflect.Method { override: false, securityCheckCache: !!null \"\", clazz: !type java.lang.ProcessBuilder, slot: 16, name: start, returnType: !type java.lang.Process, parameterTypes: [ ], exceptionTypes: [ !type java.io.IOException ], modifiers: 1, annotations: !!null \"\", parameterAnnotations: !!null \"\", annotationDefault: !!null \"\", methodAccessor: !!null \"\", root: !java.lang.reflect.Method { override: false, securityCheckCache: !!null \"\", clazz: !type java.lang.ProcessBuilder, slot: 16, name: start, returnType: !type java.lang.Process, parameterTypes: [ ], exceptionTypes: [ !type java.io.IOException ], modifiers: 1, annotations: !!null \"\", parameterAnnotations: !!null \"\", annotationDefault: !!null \"\", methodAccessor: !!null \"\", root: !!null \"\" } }, name: foo }, next: foo }, transforms: !!null \"\", lock: !java.lang.Object { } }, input: !java.lang.ProcessBuilder$NullInputStream { }, ibuffer: !!binary , done: false, obuffer: !!null \"\", ostart: 0, ofinish: 0, closed: false }, consumed: false },\n" +
                "    objDataSource: !!null \"\",\n" +
                "    object: !!null \"\",\n" +
                "    objectMimeType: !!null \"\",\n" +
                "    currentCommandMap: !!null \"\",\n" +
                "    transferFlavors: [ ],\n" +
                "    dataContentHandler: !!null \"\",\n" +
                "    factoryDCH: !!null \"\",\n" +
                "    oldFactory: !!null \"\",\n" +
                "    shortType: !!null \"\"\n" +
                "  },\n" +
                "  data: !!null \"\",\n" +
                "  dataLen: 0,\n" +
                "  mimeType: !!null \"\"\n" +
                "}";

        Object fromString = Marshallable.fromString(yaml2);
        fail("didn't expect " + fromString);
    }
}
