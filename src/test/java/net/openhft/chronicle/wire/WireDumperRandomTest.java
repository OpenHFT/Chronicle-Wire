package net.openhft.chronicle.wire;

import net.openhft.chronicle.bytes.Bytes;
import net.openhft.chronicle.bytes.OnHeapBytes;
import org.junit.Test;

import java.util.Random;

import static org.junit.Assert.assertEquals;

public class WireDumperRandomTest {

    public static final int LEN = 64;

    @Test
    public void dumpBinary() {
        // Initialize a count variable.
        int count = 0;

        // Allocate on-heap bytes of length LEN.
        OnHeapBytes bytes = Bytes.allocateElasticOnHeap(LEN);

        // Define a string that will act as a check for the starting of the output string from the WireDumper.
        String starts = "--- !!data #binary\n" +
                "00000000             ";

        // Loop for 20000 iterations, generating different binary data.
        for (int i = 0; i < 20000; i++) {
            // Generate random values based on iteration count.
            Random random = new Random(i);

            // Clear bytes, write length information and random integer value.
            bytes.clear()
                    .writeInt(LEN - 4)
                    .writeInt(random.nextInt());

            // Fill the remaining bytes with random long values.
            for (int n = 8; n < LEN; n += 8)
                bytes.writeLong(random.nextLong());

            // Generate a string representation using WireDumper on a BinaryWire with the generated bytes.
            String string = WireDumper.of(new BinaryWire(bytes))
                    .asString();

            // Check whether the string starts with the predefined starting string.
            if (!string.startsWith(starts)) {
                count++;
//                if (count++ < 10)
//                    System.out.println("i: " + i + " " + string);
//                assertEquals("i: " + i + " " + string, starts, string.substring(0, starts.length()));
            }
        }

        // Assert that count should be 3. It seems like we expect 3 strings not to start with the defined string.
        assertEquals(3, count);
    }
}
